import React, { useState } from "react";
import axios from "axios";
import { Copy, Wallet } from "lucide-react";
import { ToastContainer, toast } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";
import { ethers } from "ethers";
import { ProofOfExistence } from "../ABI/ProofOfExistence.js";
import FileUpload from "./FileUpload";
// require("dotenv").config();

const Page = () => {
  const [files, setFiles] = useState([]);
  const [ipfsHash, setIpfsHash] = useState("");
  const [walletAddress, setWalletAddress] = useState("");
  const [notarizedDocuments, setNotarizedDocuments] = useState([]);
  const [verifyHash, setVerifyHash] = useState("");
  const [manualIpfsHash, setManualIpfsHash] = useState("");

  const pinataApiKey = "";
  const pinataSecretApiKey = "";

  const contractAddress = "0xc16d9B990291CF271d3716D371E4784aCA71425b";
  const provider = new ethers.providers.Web3Provider(window.ethereum);
  const signer = provider.getSigner();
  const contract = new ethers.Contract(
    contractAddress,
    ProofOfExistence,
    signer
  );

  const truncateString = (str, startLength = 6, endLength = 4) => {
    if (!str) return "";
    if (str.length <= startLength + endLength) return str;
    return `${str.slice(0, startLength)}...${str.slice(-endLength)}`;
  };

  const handleFileUpload = async (files) => {
    console.log("Files received in handleFileUpload:", files);
    setFiles(files);

    if (files && files.length > 0) {
      console.log("File is ready for upload:", files[0]);
      await uploadToIPFS(files[0]);
    } else {
      console.log("No file found in files array.");
    }
  };

  const uploadToIPFS = async (file) => {
    if (!walletAddress) {
      toast.error("Please connect your wallet first!");
      console.log("No wallet address found, please connect.");
      return;
    }

    if (!file) {
      toast.error("Please select a file to upload");
      console.log("No file provided to uploadToIPFS.");
      return;
    }

    console.log("Starting IPFS upload for file:", file);

    const formData = new FormData();
    formData.append("file", file);

    const uploadingToastId = toast.info("Uploading file...", {
      autoClose: 2000, // Speed up the toast timer
    });

    try {
      const response = await axios.post(
        "https://api.pinata.cloud/pinning/pinFileToIPFS",
        formData,
        {
          maxBodyLength: Infinity,
          headers: {
            "Content-Type": "multipart/form-data",
            pinata_api_key: pinataApiKey,
            pinata_secret_api_key: pinataSecretApiKey,
          },
        }
      );

      const hash = response.data.IpfsHash;
      setIpfsHash(hash);
      setManualIpfsHash(""); // Clear the manual input field

      console.log("File uploaded successfully. IPFS Hash:", hash);

      toast.update(uploadingToastId, {
        render: "File uploaded successfully!",
        type: "success",
        autoClose: 2000, // Speed up the toast timer
      });
    } catch (error) {
      console.error("Upload error:", error);
      toast.update(uploadingToastId, {
        render: "Error uploading file on IPFS",
        type: "error",
        autoClose: 2000, // Speed up the toast timer
      });
    }
  };

  const connectWallet = async () => {
    if (window.ethereum) {
      try {
        const accounts = await window.ethereum.request({
          method: "eth_requestAccounts",
        });
        setWalletAddress(accounts[0]);
        toast.success("Wallet connected successfully!", { autoClose: 2000 });
      } catch (error) {
        console.error("Error connecting wallet:", error);
        toast.error("Failed to connect wallet");
      }
    } else {
      toast.error("Please install MetaMask!");
    }
  };

  const copyToClipboard = (text, message = "Copied to clipboard!") => {
    navigator.clipboard.writeText(text);
    toast.success(message, { autoClose: 2000 });
  };

  const notarizeDocument = async () => {
    if (!walletAddress) {
      toast.error("Please connect your wallet first!", { autoClose: 2000 });
      return;
    }

    if (!manualIpfsHash) {
      toast.error("Please enter an IPFS hash to notarize");
      return;
    }

    const notarizingToastId = toast.info("Notarizing document...", {
      autoClose: false,
    });

    try {
      const bytes32 = ethers.utils.keccak256(
        ethers.utils.toUtf8Bytes(manualIpfsHash)
      );
      console.log("Generated bytes32 hash:", bytes32);

      const tx = await contract.notarizeDocument(bytes32, {
        gasLimit: 350000,
      });

      console.log("Transaction sent:", tx);

      const receipt = await tx.wait();
      console.log("Transaction receipt:", receipt);

      // Check if the transaction was successful
      if (receipt.status === 1) {
        const document = {
          signer: walletAddress,
          documentName: files[0]?.name || "Unnamed Document",
          ipfsHash: manualIpfsHash,
          bytes32Hash: bytes32,
          timestamp: new Date().toLocaleString(),
        };
        setNotarizedDocuments((prev) => [...prev, document]);

        toast.update(notarizingToastId, {
          render: "Document notarized successfully!",
          type: "success",
          autoClose: 2000,
        });
      } else {
        throw new Error("Transaction failed");
      }
    } catch (error) {
      console.error("Notarization error:", error);
      toast.update(notarizingToastId, {
        render: "Error notarizing document: " + error.message,
        type: "error",
        autoClose: 2000,
      });
    }
  };

  const verifyDocument = async () => {
    if (!verifyHash) {
      toast.error("Please enter the bytes32 hash to verify");
      return;
    }

    const verifyingToastId = toast.info("Verifying document...", {
      autoClose: false,
    });

    try {
      console.log("Attempting to verify hash:", verifyHash);
      const [timestamp, owner] = await contract.verifyDocument(verifyHash);
      console.log("Verification result:", { timestamp, owner });

      if (timestamp.toString() !== "0") {
        toast.update(verifyingToastId, {
          render: `Document verified! Owner: ${truncateString(owner)}`,
          type: "success",
          autoClose: 2000,
        });
      } else {
        throw new Error("Document not found");
      }
    } catch (error) {
      console.error("Verification error:", error);
      toast.update(verifyingToastId, {
        render: "Error verifying document: " + error.message,
        type: "error",
        autoClose: 2000,
      });
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-b from-purple-50 to-white dark:from-gray-900 dark:to-gray-800 p-8">
      <div className="max-w-6xl mx-auto">
        <div className="flex justify-between items-center mb-8">
          <h1 className="text-3xl font-bold bg-gradient-to-r from-blue-700 to-blue-900 bg-clip-text text-transparent">
            DocVouch
          </h1>
          <button
            onClick={connectWallet}
            className="flex items-center gap-2 px-6 py-3 bg-gradient-to-r from-blue-700 to-blue-900 hover:opacity-90 text-white rounded-lg shadow-lg transition-all duration-200 font-medium"
          >
            <Wallet className="h-5 w-5" />
            {walletAddress ? truncateString(walletAddress) : "Connect Wallet"}
          </button>
        </div>

        <div className="space-y-6">
          {/* Notarize Document Section */}
          <div className="bg-white dark:bg-gray-800 rounded-xl shadow-lg p-6 border border-purple-100 dark:border-blue-900">
            <FileUpload onFileUpload={handleFileUpload} />
          </div>
          {ipfsHash && (
            <div className="mt-4">
              <h2 className="text-xl font-semibold mb-4">IPFS Hash:</h2>

              <div className="mt-4 flex items-center">
                <p className="flex-grow p-2 border rounded-md mr-2">
                  {ipfsHash}
                </p>
                <button
                  onClick={() => copyToClipboard(ipfsHash)}
                  className="p-1 text-gray-500 hover:text-gray-700"
                  aria-label="Copy IPFS Hash"
                >
                  <Copy className="h-4 w-4" />
                </button>
              </div>
            </div>
          )}

          <div className="bg-white dark:bg-gray-800 rounded-xl shadow-lg p-6 border border-purple-100 dark:border-blue-900">
            <h2 className="text-xl font-semibold mb-4">Notarize Document</h2>
            <input
              type="text"
              placeholder="Enter IPFS Hash"
              value={manualIpfsHash}
              onChange={(e) => setManualIpfsHash(e.target.value)}
              className="w-full p-2 border rounded-md mb-4"
            />
            <button
              onClick={notarizeDocument}
              className="mt-4 px-4 py-2 bg-gradient-to-r from-blue-700 to-blue-900 text-white rounded-lg transition-all duration-200 hover:opacity-90"
            >
              Notarize Document
            </button>
          </div>

          {/* Verification Section */}
          <div className="bg-white dark:bg-gray-800 rounded-xl shadow-lg p-6 border border-purple-100 dark:border-blue-900">
            <h2 className="text-xl font-semibold mb-4">Verify Document</h2>
            <input
              type="text"
              placeholder="Enter bytes32 Hash"
              value={verifyHash}
              onChange={(e) => setVerifyHash(e.target.value)}
              className="w-full p-2 border rounded-md mb-4"
            />
            <button
              onClick={verifyDocument}
              className="mt-4 px-4 py-2 bg-gradient-to-r from-blue-700 to-blue-900 text-white rounded-lg transition-all duration-200 hover:opacity-90"
            >
              Verify Document
            </button>
          </div>

          {/* Notarized Documents Table */}
          {notarizedDocuments.length > 0 && (
            <div className="bg-white dark:bg-gray-800 rounded-xl shadow-lg p-6 border border-purple-100 dark:border-blue-900">
              <h2 className="text-xl font-semibold mb-4">
                Notarized Documents
              </h2>
              <table className="w-full border-collapse">
                <thead className="bg-gradient-to-r from-blue-700 to-blue-900 text-white">
                  <tr>
                    <th className="border px-4 py-2 text-center">
                      Document Name
                    </th>
                    <th className="border px-4 py-2 text-center">
                      Signer Address
                    </th>
                    <th className="border px-4 py-2 text-center">
                      Original IPFS Hash
                    </th>
                    <th className="border px-4 py-2 text-center">
                      Bytes32 Hash
                    </th>
                    <th className="border px-4 py-2 text-center">Timestamp</th>
                  </tr>
                </thead>
                <tbody>
                  {notarizedDocuments.map((doc, index) => (
                    <tr key={index}>
                      <td className="border px-4 py-2 text-center">
                        {doc.documentName}
                      </td>
                      <td className="border px-4 py-2 text-center">
                        <div className="flex items-center justify-center gap-2">
                          <div className="group relative cursor-pointer">
                            <span>{truncateString(doc.signer)}</span>
                            <div className="invisible group-hover:visible absolute left-1/2 -translate-x-1/2 -top-10 bg-gray-800 text-white px-2 py-1 rounded text-sm whitespace-nowrap z-10">
                              {doc.signer}
                            </div>
                          </div>
                          <Copy
                            className="h-4 w-4 cursor-pointer hover:text-blue-600"
                            onClick={() =>
                              copyToClipboard(
                                doc.signer,
                                "Address copied to clipboard!"
                              )
                            }
                          />
                        </div>
                      </td>

                      <td className="border px-4 py-2 text-center">
                        <div className="flex items-center justify-center gap-2">
                          <div className="group relative cursor-pointer">
                            <span>{truncateString(doc.ipfsHash)}</span>
                            <div className="invisible group-hover:visible absolute left-1/2 -translate-x-1/2 -top-10 bg-gray-800 text-white px-2 py-1 rounded text-sm whitespace-nowrap z-10">
                              {doc.ipfsHash}
                            </div>
                          </div>
                          <Copy
                            className="h-4 w-4 cursor-pointer hover:text-blue-600"
                            onClick={() =>
                              copyToClipboard(
                                doc.ipfsHash,
                                "IPFS Hash copied to clipboard!"
                              )
                            }
                          />
                        </div>
                      </td>
                      <td className="border px-4 py-2 text-center">
                        <div className="flex items-center justify-center gap-2">
                          <div className="group relative cursor-pointer">
                            <span>{truncateString(doc.bytes32Hash)}</span>
                            <div className="invisible group-hover:visible absolute left-1/2 -translate-x-1/2 -top-10 bg-gray-800 text-white px-2 py-1 rounded text-sm whitespace-nowrap z-10">
                              {doc.bytes32Hash}
                            </div>
                          </div>
                          <Copy
                            className="h-4 w-4 cursor-pointer hover:text-blue-600"
                            onClick={() =>
                              copyToClipboard(
                                doc.bytes32Hash,
                                "Hash copied to clipboard!"
                              )
                            }
                          />
                        </div>
                      </td>
                      <td className="border px-4 py-2 text-center">
                        {doc.timestamp}
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          )}
        </div>
      </div>
      <ToastContainer />
    </div>
  );
};

export default Page;
